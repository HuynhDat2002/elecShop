{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///home/trongdat/Documents/electronicShop/frontendUser/src/app/api/courses/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { Course } from \"@/types\";\nimport courses from './courses.json'; // Assuming you have a products.json file with product data\nimport { Redis } from '@upstash/redis'\nconst redis = new Redis({\n    url: 'https://relaxed-mastodon-16058.upstash.io',\n    token: 'AT66AAIjcDEyMDMyMTUxODFmMDU0ZGQzYTlkMWJhYTQxNmMyN2QxMnAxMA',\n})\nexport async function GET(req: Request) {\n    const { searchParams } = new URL(req.url);\n    const query = searchParams.get(\"query\")?.toLowerCase() || \"\";\n    const price = searchParams.get(\"price\")?.toLowerCase() || \"\";\n    console.log('query from api',query,'price',price)\n    if(!await redis.get(\"courses\")){\n        console.log('do not have courses')\n        await redis.set('courses',JSON.stringify(courses.courses))\n    }\n    if (query !== \"\") {\n\n        let result: any\n        if (price === \"\") result = courses.courses.filter((course) => course.name.toLowerCase().includes(query))\n        if (price === \"lt500\") result = courses.courses.filter((course) => course.name.toLowerCase().includes(query) && course.price < 500000)\n        if (price === \"from500to1m\") result = courses.courses.filter((course) => course.name.toLowerCase().includes(query) && course.price >= 500000 && course.price <= 1000000)\n        if (price === \"g1000\") result = courses.courses.filter((course) => course.name.toLowerCase().includes(query) && course.price > 1000000)\n\n        return NextResponse.json({\n            courses: result\n        })\n\n    }\n    else {\n        let result: any\n        if (price === \"\") result = courses.courses\n        if (price === \"lt500\") result = courses.courses.filter((course) => course.price < 500000)\n        if (price === \"from500to1m\") result = courses.courses.filter((course) => course.price >= 500000 && course.price <= 1000000)\n        if (price === \"gt1000\") result = courses.courses.filter((course) => course.price > 1000000)\n\n        return NextResponse.json({\n            courses: result\n        })\n    }\n}"],"names":[],"mappings":";;;AAAA;AAEA,oMAAsC,2DAA2D;AACjG;AAAA;;;;AACA,MAAM,QAAQ,IAAI,+JAAA,CAAA,QAAK,CAAC;IACpB,KAAK;IACL,OAAO;AACX;AACO,eAAe,IAAI,GAAY;IAClC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,QAAQ,aAAa,GAAG,CAAC,UAAU,iBAAiB;IAC1D,MAAM,QAAQ,aAAa,GAAG,CAAC,UAAU,iBAAiB;IAC1D,QAAQ,GAAG,CAAC,kBAAiB,OAAM,SAAQ;IAC3C,IAAG,CAAC,MAAM,MAAM,GAAG,CAAC,YAAW;QAC3B,QAAQ,GAAG,CAAC;QACZ,MAAM,MAAM,GAAG,CAAC,WAAU,KAAK,SAAS,CAAC,+GAAA,CAAA,UAAO,CAAC,OAAO;IAC5D;IACA,IAAI,UAAU,IAAI;QAEd,IAAI;QACJ,IAAI,UAAU,IAAI,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QACjG,IAAI,UAAU,SAAS,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU,OAAO,KAAK,GAAG;QAC/H,IAAI,UAAU,eAAe,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU,OAAO,KAAK,IAAI,UAAU,OAAO,KAAK,IAAI;QAChK,IAAI,UAAU,SAAS,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU,OAAO,KAAK,GAAG;QAE/H,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;QACb;IAEJ,OACK;QACD,IAAI;QACJ,IAAI,UAAU,IAAI,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO;QAC1C,IAAI,UAAU,SAAS,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,KAAK,GAAG;QAClF,IAAI,UAAU,eAAe,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,KAAK,IAAI,UAAU,OAAO,KAAK,IAAI;QACnH,IAAI,UAAU,UAAU,SAAS,+GAAA,CAAA,UAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAW,OAAO,KAAK,GAAG;QAEnF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;QACb;IACJ;AACJ","debugId":null}}]
}